<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>King1Lfe</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-03-29T05:59:28.537Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Jason</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>aaaaaa</title>
    <link href="http://yoursite.com/2018/03/29/aaaaaa/"/>
    <id>http://yoursite.com/2018/03/29/aaaaaa/</id>
    <published>2018-03-29T05:59:28.000Z</published>
    <updated>2018-03-29T05:59:28.537Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>hexo+git+hexo搭建静态博客，主题、背景、点赞等优化1111111111</title>
    <link href="http://yoursite.com/2018/03/27/hexo-git-hexo%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%EF%BC%8C%E4%B8%BB%E9%A2%98%E3%80%81%E8%83%8C%E6%99%AF%E3%80%81%E7%82%B9%E8%B5%9E%E7%AD%89%E4%BC%98%E5%8C%961111111111/"/>
    <id>http://yoursite.com/2018/03/27/hexo-git-hexo搭建静态博客，主题、背景、点赞等优化1111111111/</id>
    <published>2018-03-27T11:10:05.000Z</published>
    <updated>2018-03-27T11:12:53.741Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome</p>]]></content>
    
    <summary type="html">
    
      1133erdffd
    
    </summary>
    
    
      <category term="dafddf" scheme="http://yoursite.com/tags/dafddf/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/03/24/hello-world/"/>
    <id>http://yoursite.com/2018/03/24/hello-world/</id>
    <published>2018-03-24T04:54:48.971Z</published>
    <updated>2018-03-25T09:13:28.129Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>scala + actor 并发编程,单机版本的单词计数器WordCount(简易原理)</title>
    <link href="http://yoursite.com/2018/02/24/scala+actor%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AE%9E%E7%8E%B0wordCount%E5%8D%95%E8%AF%8D%E8%AE%A1%E6%95%B0%E5%99%A8/"/>
    <id>http://yoursite.com/2018/02/24/scala+actor并发编程实现wordCount单词计数器/</id>
    <published>2018-02-24T05:59:28.000Z</published>
    <updated>2018-03-29T06:10:33.363Z</updated>
    
    <content type="html"><![CDATA[<p>##需求</p><h4 id="scala-actor并发编程-写一个单机版的WordCount，将多个文件作为输入，计算完成后将多个任务汇总，得到最终的结果。"><a href="#scala-actor并发编程-写一个单机版的WordCount，将多个文件作为输入，计算完成后将多个任务汇总，得到最终的结果。" class="headerlink" title="scala + actor并发编程 ,写一个单机版的WordCount，将多个文件作为输入，计算完成后将多个任务汇总，得到最终的结果。"></a>scala + actor并发编程 ,写一个单机版的WordCount，将多个文件作为输入，计算完成后将多个任务汇总，得到最终的结果。</h4><p>##思路</p><blockquote><ul><li>通过loop +react 方式去不断的接受消息</li><li>利用case class样例类去匹配对应的操作</li><li>其中scala中提供了文件读取的接口Source,通过调用其fromFile方法去获取文件内容</li><li>将每个文件的单词数量进行局部汇总，存放在一个ListBuffer中</li><li>最后将ListBuffer中的结果进行全局汇总。</li></ul></blockquote><p>##代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">import scala.actors.&#123;Actor, Future&#125;</span><br><span class="line">import scala.collection.mutable</span><br><span class="line">import scala.collection.mutable.ListBuffer</span><br><span class="line">import scala.io.Source</span><br><span class="line"></span><br><span class="line">//Actor 负责 解析每一个文件,把文件的结果返回</span><br><span class="line"></span><br><span class="line">// 定义存储数据的样例类</span><br><span class="line">//一个作为消息,说明提交文件的路径</span><br><span class="line">case class SumitTask(file:String);</span><br><span class="line">//一作保存每一个文件的单词数量</span><br><span class="line">case class ResultTask(result:Map[String,Int]);</span><br><span class="line"></span><br><span class="line">class WordCountTask extends Actor&#123;</span><br><span class="line">  override def act(): Unit = &#123;</span><br><span class="line">    loop &#123;</span><br><span class="line">      react&#123;</span><br><span class="line">      case SumitTask(file)</span><br><span class="line">      =&gt;</span><br><span class="line">      &#123;</span><br><span class="line">        //1,读取数据文件</span><br><span class="line">        val data: String = Source.fromFile(file).mkString;</span><br><span class="line">        //2,将文件数据进行按行切分,一行.在window下是 \r\n,在 linux下是 \n 在mac下是\r</span><br><span class="line">        val LineArray: Array[String] = data.split(&quot;\r\n&quot;);</span><br><span class="line">        //3,将每一行按空格切分(数据暂先按照空格来分),得到所欲单词</span><br><span class="line">        val words: Array[String] = LineArray.flatMap(_.split(&quot; &quot;));</span><br><span class="line">        //4,给每个单词统计标记为1个,单词 和 标记 1 组成元组</span><br><span class="line">        val wordMark: Array[(String, Int)] = words.map((_, 1));</span><br><span class="line">        //5,对相同的单词进行分组</span><br><span class="line">        val wordSameGrouop: Map[String, Array[(String, Int)]] = wordMark.groupBy(_._1);</span><br><span class="line">        //6,统计文件中单词出现的次数</span><br><span class="line">        val result: Map[String, Int] = wordSameGrouop.mapValues(_.length);</span><br><span class="line">        //7,结果,存储到样例类中,并返回</span><br><span class="line">        sender ! ResultTask(result);</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//WordCount对象负责把文件传给actor ,然后接受接受每个文件的单词统计,做最后汇总</span><br><span class="line">object WordCount&#123;</span><br><span class="line">  def main(args: Array[String]): Unit = &#123;</span><br><span class="line"></span><br><span class="line">    var fileArr=Array(&quot;D:/aa.txt&quot;,&quot;D:/bb.txt&quot;,&quot;D:/cc.txt&quot;);</span><br><span class="line">    var FutureSet = new mutable.HashSet[Future[Any]]();</span><br><span class="line">    var resultList = new ListBuffer[ResultTask];</span><br><span class="line"></span><br><span class="line">    //循环遍历文件,发送消息,接受数据</span><br><span class="line">    for(file&lt;-fileArr)&#123;</span><br><span class="line">      val task = new WordCountTask;</span><br><span class="line">      task.start();</span><br><span class="line">      val reply:Future[Any] = task !! SumitTask(file);</span><br><span class="line">      //将每次发送的文件返回的数据保存到可变的HashSet中</span><br><span class="line">      FutureSet += reply;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //搜集整合所有文件返回的数据</span><br><span class="line">    while(FutureSet.size &gt; 0)&#123;</span><br><span class="line">      val completedFuture : mutable.HashSet[Future[Any]] = FutureSet.filter(_.isSet);</span><br><span class="line">      for( oneCompletedFuture &lt;- completedFuture)&#123;</span><br><span class="line">        val apply: Any = oneCompletedFuture.apply();</span><br><span class="line">        resultList+= apply.asInstanceOf[ResultTask];</span><br><span class="line">        FutureSet-=oneCompletedFuture;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //整合所有数据</span><br><span class="line">    var resultLast = resultList.map(_.result).flatten.groupBy(_._1).mapValues(x=&gt;x.foldLeft(0)(_+_._2));</span><br><span class="line">    print(resultLast);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##需求&lt;/p&gt;
&lt;h4 id=&quot;scala-actor并发编程-写一个单机版的WordCount，将多个文件作为输入，计算完成后将多个任务汇总，得到最终的结果。&quot;&gt;&lt;a href=&quot;#scala-actor并发编程-写一个单机版的WordCount，将多个文件作为输入，计
      
    
    </summary>
    
    
  </entry>
  
</feed>
